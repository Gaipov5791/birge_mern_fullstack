// backend/middleware/authMddleware.js

import jwt from 'jsonwebtoken'; // üëà –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û
import User from '../models/User.js'; // üëà –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û (–ø—É—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)

const protect = async (req, res, next) => {
    
    // ‚≠ê –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...
    if (res.headersSent) {
        return next(); 
    }
    
    // 1. –ò—Å–∫–ª—é—á–∞–µ–º OPTIONS
    if (req.method === 'OPTIONS') {
        return next(); 
    }
    
    let token;

    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            token = req.headers.authorization.split(' ')[1];

            // ‚≠ê –í–†–ï–ú–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        if (token === 'undefined' || token === '' || token === 'null') {
             console.error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ó–∞–≥–æ–ª–æ–≤–æ–∫ Bearer —Å–æ–¥–µ—Ä–∂–∏—Ç:', token);
             // –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –í –ü–†–û–î–ê–ö–®–ï–ù–ï, –Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
             return res.status(401).json({ message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç undefined' });
        }
            
            if (!token) { 
                 return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
            }
            
            // ‚≠ê 1. –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê
            // –ö–û–î –í –≠–¢–û–ú –ú–ï–°–¢–ï –ò–°–ü–†–ê–í–õ–ï–ù
            const decoded = jwt.verify(token, process.env.JWT_SECRET); 
            
            // ‚≠ê 2. –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –£–°–¢–ê–ù–û–í–ö–ê req.user
            // –ö–û–î –í –≠–¢–û–ú –ú–ï–°–¢–ï –ò–°–ü–†–ê–í–õ–ï–ù
            req.user = await User.findById(decoded.id).select('-password'); 

            // ‚≠ê 3. –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
            if (!req.user) {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–µ—Ä–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            // ‚≠ê –£–°–ü–ï–•: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
            return next(); 

        } catch (error) {
            // –û–®–ò–ë–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
            console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT:', error.message);
            // ‚≠ê –ü–†–û–í–ê–õ: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
            return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' });
        }
    } 
    
    // ‚≠ê –ü–†–û–í–ê–õ: –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
    return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
};

export { protect };