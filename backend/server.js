//k40ooxNul0Bsom55

// backend/server.js
import express from 'express';
import session from 'express-session';
import passport from './config/passport.js';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
dotenv.config();
import cors from 'cors';
import { createServer } from 'http';
import { Server } from 'socket.io';
import connectDB from '../backend/config/db.js';
import userRoutes from '../backend/routes/userRoutes.js';
import postRoutes from '../backend/routes/postRoutes.js';
import commentRoutes from '../backend/routes/commentRoutes.js';
import chatRoutes from '../backend/routes/chatRoutes.js';
import notificationRoutes from '../backend/routes/notificationRoutes.js';
import trendRoutes from '../backend/routes/trendRoutes.js'; // ‚≠ê –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤
import feedbackRoutes from '../backend/routes/feedbackRoutes.js'; // ‚≠ê –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
import Chat from '../backend/models/Chat.js'; // –í–∞—à–∞ –º–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
import Conversation from '../backend/models/Conversation.js'; // ‚≠ê –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å Conversation
import User from '../backend/models/User.js'; // ‚≠ê –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å User –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username/profilePicture
import path from 'path';
import { fileURLToPath } from 'url';
import multer from 'multer';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
connectDB();

const app = express();
const server = createServer(app);

// üëá 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: CORS –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú! üëá
app.use(cors({
    origin: process.env.CLIENT_URL,
    —Åredentials: true,
}));

// 2. –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json());

const PORT = process.env.PORT || 5000;

const io = new Server(server, {
    cors: {
        origin: 'http://localhost:5173',
        methods: ['GET', 'POST'],
    },
});

const userSocketMap = {}; // userId -> socketId

// ‚≠ê –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
// –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —Å–æ–∫–µ—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å –ø–æ–ª–µ `socket.data.activeChatWith`
// –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —Å –∫–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –æ–±—â–∞–µ—Ç—Å—è.

const getReceiverSocketId = (receiverId) => {
    return userSocketMap[receiverId];
};

const notifyAllUsersAboutStatus = (userId, isOnline) => {
    io.emit('userStatus', { userId, isOnline });
};

io.on('connection', (socket) => {
    const userId = socket.handshake.query.userId;

    if (userId) {
        userSocketMap[userId] = socket.id;
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.id} (ID: ${userId})`);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–µ—Ç–∏:', Object.keys(userSocketMap));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∫–µ—Ç–∞
        socket.data.userId = userId; // ‚≠ê –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –≤ socket.data
        socket.data.activeChatWith = null; // ‚≠ê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º activeChatWith

        socket.emit('onlineUsers', Object.keys(userSocketMap));
        socket.broadcast.emit('userStatus', { userId, isOnline: true });
    }

    // –õ–æ–≥–∏–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    Chat.find({ receiver: userId, delivered: false }).then(async (undeliveredMessages) => {
        if (undeliveredMessages.length > 0) {
            await Chat.updateMany(
                { _id: { $in: undeliveredMessages.map(m => m._id) } },
                { $set: { delivered: true } }
            );
            const senderIds = [...new Set(undeliveredMessages.map(msg => msg.sender.toString()))];
            senderIds.forEach(senderId => {
                const senderSocketId = userSocketMap[senderId];
                if (senderSocketId) {
                    io.to(senderSocketId).emit('messagesDelivered', { senderId: userId });
                }
            });
        }
    }).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', err));

    // ‚≠ê –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç ChatPage)
    socket.on('joinChat', async ({ receiverId }) => {
        if (socket.data.userId && receiverId) {
            socket.data.activeChatWith = receiverId; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
            console.log(`User ${socket.data.userId} joined chat with ${receiverId}`);

            // ‚≠ê –õ–û–ì–ò–ö–ê –°–ë–†–û–°–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–†–ò –í–•–û–î–ï –í –ß–ê–¢
            try {
                // –ò—â–µ–º –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ receiverId
                const conversation = await Conversation.findOneAndUpdate(
                    {
                        participants: { $all: [socket.data.userId, receiverId] }
                    },
                    {
                        // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
                        $set: { "unreadCounts.$[elem].count": 0 }
                    },
                    {
                        arrayFilters: [{ "elem.user": socket.data.userId }],
                        new: true // –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                    }
                );
                
                if (conversation) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º readBy –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª
                    await Chat.updateMany(
                        { 
                            sender: receiverId, // –°–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
                            receiver: socket.data.userId, // –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                            readBy: { $ne: socket.data.userId } // –ï—â—ë –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                        },
                        { 
                            $addToSet: { readBy: socket.data.userId } // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ readBy
                        }
                    );

                    console.log(`Unread count for user ${socket.data.userId} in conversation with ${receiverId} reset.`);
                    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
                    const senderSocketId = getReceiverSocketId(receiverId);
                    if (senderSocketId) {
                        io.to(senderSocketId).emit('messagesRead', { 
                            readerId: socket.data.userId, 
                            conversationId: conversation._id,
                            receiverId: socket.data.userId, // ID —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª
                            senderId: receiverId // ID —Ç–æ–≥–æ, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–ª–∏
                        });
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç:', error);
            }
        }
    });

    // ‚≠ê –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç
    socket.on('leaveChat', () => {
        if (socket.data.userId) {
            console.log(`User ${socket.data.userId} left active chat with ${socket.data.activeChatWith}`);
            socket.data.activeChatWith = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        }
    });

    // –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –¢–ï–ö–°–¢–û–í–´–• –°–û–ë–´–¢–ò–ô
    socket.on('typing', ({ senderId, receiverId }) => {
        const receiverSocketId = getReceiverSocketId(receiverId);
        if (receiverSocketId) {
            io.to(receiverSocketId).emit('typing', { senderId });
        }
    });

    socket.on('stoppedTyping', ({ senderId, receiverId }) => {
        const receiverSocketId = getReceiverSocketId(receiverId);
        if (receiverSocketId) {
            io.to(receiverSocketId).emit('stoppedTyping', { senderId });
        }
    });

    socket.on('sendMessage', async (messageData) => {
        const { sender, receiver, text } = messageData;
        const senderId = new mongoose.Types.ObjectId(sender);
        const receiverId = new mongoose.Types.ObjectId(receiver);

        try {
            const receiverSocketId = userSocketMap[receiverId.toString()];
            const isReceiverOnline = !!receiverSocketId;

            // ‚≠ê 1. –ù–ê–ô–¢–ò –ò–õ–ò –°–û–ó–î–ê–¢–¨ CONVERSATION
            let conversation = await Conversation.findOne({
                participants: { $all: [senderId, receiverId] }
            });

            if (!conversation) {
                conversation = await Conversation.create({
                    participants: [senderId, receiverId],
                    unreadCounts: [
                        { user: senderId, count: 0 },
                        { user: receiverId, count: 0 }
                    ]
                });
            }

            // ‚≠ê 2. –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            const newMessage = new Chat({
                sender: senderId,
                receiver: receiverId,
                text,
                delivered: isReceiverOnline,
                readBy: [senderId], // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ "—á–∏—Ç–∞–µ—Ç" —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                conversation: conversation._id // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–∞–ª–æ–≥–æ–º
            });

            const savedMessage = await newMessage.save();

            // ‚≠ê 3. –û–ë–ù–û–í–õ–Ø–ï–ú CONVERSATION –° –ù–û–í–´–ú –°–û–û–ë–©–ï–ù–ò–ï–ú –ò –°–ß–ï–¢–ß–ò–ö–ê–ú–ò
            conversation.lastMessage = savedMessage._id;
            conversation.lastMessageAt = savedMessage.createdAt;

            // –û–±–Ω–æ–≤–ª—è–µ–º unreadCounts
            const receiverUnreadIndex = conversation.unreadCounts.findIndex(uc => uc.user.equals(receiverId));
            if (receiverUnreadIndex !== -1) {
                conversation.unreadCounts[receiverUnreadIndex].count++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            } else {
                conversation.unreadCounts.push({ user: receiverId, count: 1 });
            }

            const senderUnreadIndex = conversation.unreadCounts.findIndex(uc => uc.user.equals(senderId));
            if (senderUnreadIndex !== -1) {
                conversation.unreadCounts[senderUnreadIndex].count = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            } else {
                conversation.unreadCounts.push({ user: senderId, count: 0 });
            }

            await conversation.save();

            // ‚≠ê 4. –ó–ê–ì–†–£–ñ–ê–ï–ú (POPULATE) –°–í–Ø–ó–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–Ø
            const populatedMessage = await savedMessage.populate([
                { path: 'sender', select: 'username profilePicture' }, // –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                { path: 'receiver', select: 'username profilePicture' }
            ]);

            // ‚≠ê 5. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–ö–ï–¢-–°–û–ë–´–¢–ò–Ø
            const senderSocketId = userSocketMap[senderId.toString()];
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω
            if (senderSocketId) {
                io.to(senderSocketId).emit('receiveMessage', populatedMessage);
            }
            if (receiverSocketId) {
                io.to(receiverSocketId).emit('receiveMessage', populatedMessage);
            }

            // ‚≠ê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ï–°–õ–ò –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
            const receiverSocket = io.sockets.sockets.get(receiverSocketId); // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–∫–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            const receiverActiveChat = receiverSocket?.data?.activeChatWith;

            if (isReceiverOnline && receiverActiveChat !== senderId.toString()) {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω, –Ω–æ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å —ç—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
                const senderUser = await User.findById(senderId).select('username profilePicture');
                const receiverUnreadCount = conversation.unreadCounts.find(uc => uc.user.equals(receiverId))?.count || 0;
                
                io.to(receiverSocketId).emit('newUnreadMessage', {
                    senderId: senderId.toString(),
                    senderUsername: senderUser?.username,
                    senderProfilePicture: senderUser?.profilePicture,
                    unreadCount: receiverUnreadCount, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
                    lastMessageAt: savedMessage.createdAt
                });
                console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ newUnreadMessage –ø–æ–ª—É—á–∞—Ç–µ–ª—é ${receiverId} –æ—Ç ${senderId}. –°—á–µ—Ç—á–∏–∫: ${receiverUnreadCount}`);
            } else if (!isReceiverOnline) {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ñ–ª–∞–π–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ "–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                // —Ç.–∫. newUnreadMessage –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                // –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ñ–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
                // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞.
                // io.to(messageData.receiver).emit('newMessageNotification', { senderId: messageData.sender }); // <-- –≠—Ç–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ sendMessage:', error.message, error.stack);
            // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            socket.emit('messageError', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', error: error.message });
        }
    });

    socket.on('disconnect', () => {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.id}`);
        let disconnectedUserId = null;

        for (const userId in userSocketMap) {
            if (userSocketMap[userId] === socket.id) {
                disconnectedUserId = userId;
                delete userSocketMap[userId];
                break;
            }
        }

        if (disconnectedUserId) {
            socket.broadcast.emit('userStatus', { userId: disconnectedUserId, isOnline: false });
        }
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–µ—Ç–∏:', Object.keys(userSocketMap));
    });
});

// ‚≠ê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π (Passport.js —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Å—Å–∏–π)
app.use(session({
    secret: process.env.GOOGLE_CLIENT_SECRET, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 1000 * 60 * 60 * 24 } // 24 —á–∞—Å–∞
}));

app.use(passport.initialize());
app.use(passport.session());

// ‚≠ê –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è activeChatWith –≤ HTTP-–∑–∞–ø—Ä–æ—Å–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç
app.use((req, res, next) => {
    req.io = io;
    req.userSocketMap = userSocketMap;
    
    // ‚≠ê –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    req.getUserActiveChat = (userId) => {
        const socketId = userSocketMap[userId];
        if (socketId) {
            const userSocket = io.sockets.sockets.get(socketId);
            return userSocket?.data?.activeChatWith;
        }
        return null;
    };
    next();
});

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api/notifications', notificationRoutes);
app.use('/api/feedback', feedbackRoutes); // ‚≠ê –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
app.use('/api/users', userRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/trends', trendRoutes); // ‚≠ê –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤
app.use('/api/comments', commentRoutes);
app.use('/api/chat', chatRoutes);


app.get('/', (req, res) => {
    res.send('–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

server.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

app.use((err, req, res, next) => {
    if (err instanceof multer.MulterError) {
        if (err.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 50–ú–ë.' });
        }
    }
    next(err);
});