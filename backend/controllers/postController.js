import Post from "../models/Post.js";
import User from "../models/User.js";
import cloudinary from "../config/cloudinaryConfig.js";

// üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –í CLOUDINARY
    const uploadToCloudinary = (file) => {
        return new Promise((resolve, reject) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è Cloudinary
            const resourceType = file.mimetype.startsWith('video/') ? 'video' : 'image';

            // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            const uploadStream = cloudinary.uploader.upload_stream(
                { 
                    folder: "birge_posts", 
                    resource_type: resourceType,
                    // –î–æ–±–∞–≤—å—Ç–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ resourceType == 'video'
                },
                (error, result) => {
                    if (error) return reject(error);
                    resolve(result);
                }
            ).end(file.buffer); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –±—É—Ñ–µ—Ä
        });
    };

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 * –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å #, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
 * @param {string} postText 
 * @returns {string[]} –ú–∞—Å—Å–∏–≤ —Ö—ç—à—Ç–µ–≥–æ–≤.
 */
const extractHashtags = (postText) => {
    if (!postText) return [];
    
    // ‚≠ê –ù–û–í–û–ï –†–ï–ì–£–õ–Ø–†–ù–û–ï –í–´–†–ê–ñ–ï–ù–ò–ï:
    // –ò—â–µ—Ç '#' –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É—é—Ç –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ _
    // –§–ª–∞–≥ 'u' (unicode) –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.
    const regex = /#([a-zA-Z0-9_–∞-—è–ê-–Ø]+)/gu; 
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º `matchAll` –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º –∏ –≥—Ä—É–ø–ø–∞–º
    const matches = Array.from(postText.matchAll(regex)) || [];
    
    // –ú—ã –∏–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∑–∞—Ö–≤–∞—Ç–∞ [1] (—Ç–æ, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫), –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç #
    return matches.map(match => match[1].toLowerCase()); 
};

// @desc      –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
// @route     POST /api/posts/create
// @access    –ü—Ä–∏–≤–∞—Ç–Ω—ã–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
export const createPost = async (req, res) => {
    const textTrimmed = req.body.text ? req.body.text.trim() : '';
    const files = req.files || [];

    console.log("--- 4. –í—Ö–æ–¥ –≤ createPost –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ---"); // ‚≠ê –õ–û–ì
    console.log("req.body:", req.body);

    if (files.length > 0) {
        console.log(`–§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã: ${files.length}`);
        // ‚≠ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì
        console.log("–ü–ï–†–í–´–ô –§–ê–ô–õ: ", { 
            fieldname: files[0].fieldname,
            originalname: files[0].originalname,
            encoding: files[0].encoding,
            mimetype: files[0].mimetype,
            // –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –±—É–¥–µ—Ç LOG (–µ—Å–ª–∏ –¥–∏—Å–∫), –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ undefined/–æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –ø–∞–º—è—Ç—å)
            path_property: files[0].path, 
            // –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –±—É–¥–µ—Ç LOG (–µ—Å–ª–∏ –ø–∞–º—è—Ç—å), –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ undefined/–æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –¥–∏—Å–∫)
            buffer_size: files[0].buffer ? files[0].buffer.length : '–ù–ï–¢ –ë–£–§–ï–†–ê'
        }); 
    } else {
        console.log("–§–∞–π–ª—ã: –ù–ï–¢");
    }

    if (!textTrimmed && files.length === 0) {
        return res.status(400).json({ message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª(—ã)!" });
    }

    try {
        // ‚≠ê 1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –•–≠–®–¢–ï–ì–û–í –ò–ó –¢–ï–ö–°–¢–ê
        const extractedTags = extractHashtags(textTrimmed);

        let postData = {
            author: req.user._id,
            text: textTrimmed,
            hashtags: extractedTags,
            // ‚≠ê –ù–û–í–´–ï –ü–û–õ–Ø: –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –≤—Å–µ—Ö –º–µ–¥–∏–∞
            media: [], 
        };

        // üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò: –ó–ê–ì–†–£–ó–ö–ê –í CLOUDINARY
        if (files.length > 0) {
            const uploadPromises = files.map(file => uploadToCloudinary(file));
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            const uploadResults = await Promise.all(uploadPromises);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ media –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Cloudinary
            postData.media = uploadResults.map(result => ({
                type: result.resource_type, // 'image' –∏–ª–∏ 'video'
                url: result.secure_url,     // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL
            }));
        }
        
        // ‚≠ê 3. –°–û–ó–î–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–°–¢–ê
        const post = new Post(postData);
        const createdPost = await post.save();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –∞–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const populatedPost = await Post.findById(createdPost._id).populate("author", "username profilePicture");

        return res.status(201).json({
            message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            post: populatedPost,
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:", error);

        console.error("--- 5. –û–®–ò–ë–ö–ê CATCH –í –ö–û–ù–¢–†–û–õ–õ–ï–†–ï: ---", error); // ‚≠ê –õ–û–ì
        
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã
// @route   GET /api/posts
// @access  –ü—É–±–ª–∏—á–Ω—ã–π
export const getPosts = async (req, res) => {
    try {
        const posts = await Post.find({})
            .populate({
                path: 'author', // –ü–æ–ª–µ –≤ –º–æ–¥–µ–ª–∏ Post, –∫–æ—Ç–æ—Ä–æ–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ User
                select: 'username profilePicture followers following', // –ö–∞–∫–∏–µ –ø–æ–ª—è User –Ω—É–∂–Ω–æ –ø–æ–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å
            })
            .sort({ createdAt: -1 });

        return res.status(200).json({
            message: "–ü–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
            posts,
        });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
// @route   GET /api/posts/:id
// @access  –ü—É–±–ª–∏—á–Ω—ã–π
export const getPostById = async (req, res) => {
    try {
        const postId = req.params.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID:", postId);
        const post = await Post.findById(postId)
            .populate("author", "username profilePicture")
            .populate({
                path: 'comments', // –ü—É—Ç—å –∫ –º–∞—Å—Å–∏–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                populate: { // –í–ª–æ–∂–µ–Ω–Ω—ã–π populate –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    path: 'user',
                    select: 'username profilePicture' // –ö–∞–∫–∏–µ –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω—É–∂–Ω—ã
                }
            });
            
            if (!post) {
                return res.status(404).json({ message: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            }

            return res.status(200).json({
                message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
                post,
            });
    } catch (error) {
        console.error(error);
        if (error.kind === 'ObjectId') {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞" });
        }
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞" });
        
    }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
// @route   GET /api/posts/user/:userId
// @access  –ü—É–±–ª–∏—á–Ω—ã–π
export const getUserPosts = async (req, res) => {
    try {
        const userId = req.params.userId; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:", userId);
        
        const userExists = await User.findById(userId);
        if (!userExists) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const posts = await Post.find({ author: userId })
            .populate("author", "username profilePicture")
            .sort({ createdAt: -1 });

        res.status(200).json(posts);
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
        
    }
};

// @desc    –ü–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ª–∞–π–∫ –ø–æ—Å—Ç—É
// @route   PUT /api/posts/like/:id
// @access  –ü—Ä–∏–≤–∞—Ç–Ω—ã–π
export const likePost = async (req, res) => {
    try {
        const postId = req.params.id;
        const userId = req.user._id;
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:", userId, "–ø—ã—Ç–∞–µ—Ç—Å—è –ª–∞–π–∫–Ω—É—Ç—å –ø–æ—Å—Ç —Å ID:", postId);

        const post = await Post.findById(postId);
        if (!post) {
            return res.status(404).json({ message: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const alreadyLiked = post.likes.includes(userId);

        if (alreadyLiked) {
            post.likes.pull(userId);
        } else {
            post.likes.push(userId);
        }

        await post.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞)

        const populatedPost = await Post.findById(post._id)
                                      .populate('author', 'username profilePicture'); //

        const message = alreadyLiked ? "–õ–∞–π–∫ —É–±—Ä–∞–Ω" : "–ü–æ—Å—Ç –ª–∞–π–∫–Ω—É—Ç";
        return res.status(200).json({ message, post: populatedPost }); //

    } catch (error) {
        console.error(error);
        if (error.kind === 'ObjectId') {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞" });
        }
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞" });
    }
};

// @desc    –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
// @route   DELETE /api/posts/:id
// @access  –ü—Ä–∏–≤–∞—Ç–Ω—ã–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
export const deletePost = async (req, res) => {
    try {
        const post = await Post.findById(req.params.id); // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        console.log("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID:", req.params.id, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID:", req.user._id);
        if (!post) {
            return res.status(404).json({ message: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–æ—Å—Ç–∞
        if (post.author.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç" });
        }

        await post.deleteOne();
        return res.status(200).json({ message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", id: req.params.id });
    } catch (error) {
        console.error(error);
        if (error.kind === 'ObjectId') {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞" });
        }
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞" });
    }
};

// @desc    –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç
// @route   PUT /api/posts/:id
// @access  –ü—Ä–∏–≤–∞—Ç–Ω—ã–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
export const updatePost = async (req, res) => {
    const { text, image } = req.body;
    const postId = req.params.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const userId = req.user._id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID:", postId, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID:", userId);

    if (!text) {
        return res.status(400).json({ message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç!" });
    }

    try {
        const post = await Post.findById(postId);
        if (!post) {
            return res.status(404).json({ message: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–æ—Å—Ç–∞
        if (post.author.toString() !== userId.toString()) {
            return res.status(403).json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç" });
        }

        post.text = text;
        post.image = image || post.image; // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        const updatedPost = await post.save();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å—Ç–æ–º
        const populatedPost = await Post.findById(updatedPost._id).populate("author", "username profilePicture");

        return res.status(200).json({
            message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            post: populatedPost,
        });
    } catch (error) {
        console.error(error);
        if (error.kind === 'ObjectId') {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞" });
        }
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞" });
    }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
// @route   GET /api/posts/timeline
// @access  Private
export const getTimelinePosts = async (req, res) => { 
    try {
        // req.user.id - —ç—Ç–æ ID —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        // –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è middleware 'protect'
        console.log('--- –ù–∞—á–∏–Ω–∞–µ–º getTimelinePosts ---');
        console.log('ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (req.user.id):', req.user ? req.user.id : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

        if (!req.user || !req.user.id) {
            res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
            return;
        }

        const currentUser = await User.findById(req.user.id);
        console.log('–ù–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser ? currentUser.username : '–ù–µ –Ω–∞–π–¥–µ–Ω');

        if (!currentUser) {
            res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return; // –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        // –≠—Ç–∏ ID —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ 'following' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        const followedUsersIds = currentUser.following;
        console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω (currentUser.following):', followedUsersIds);

        // –î–æ–±–∞–≤–ª—è–µ–º ID —Å–∞–º–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã –≤ –ª–µ–Ω—Ç–µ
        // (–µ—Å–ª–∏ —ç—Ç–æ –∂–µ–ª–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        const allRelevantUserIds = [...followedUsersIds, currentUser._id];
        console.log('–í—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ):', allRelevantUserIds);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è/–ª–æ–≥–∞
        const stringRelevantUserIds = allRelevantUserIds.map(id => id.toString());
        console.log('–í—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∏):', stringRelevantUserIds);

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã, –≥–¥–µ author._id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ allRelevantUserIds
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º populate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ –ø–æ—Å—Ç–∞
        const timelinePosts = await Post.find({
            author: { $in: allRelevantUserIds }
        })
        .sort({ createdAt: -1 }) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        .populate('author', 'username profilePicture') // –ó–∞–≥—Ä—É–∂–∞–µ–º username –∏ profilePicture –∞–≤—Ç–æ—Ä–∞
        .populate({
            path: 'comments.author',
            select: 'username profilePicture' // –ó–∞–≥—Ä—É–∂–∞–µ–º username –∏ profilePicture –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        });
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ª–µ–Ω—Ç—ã:', timelinePosts.length);
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –ª–µ–Ω—Ç—ã (–ø–µ—Ä–≤—ã–µ 3):', timelinePosts.slice(0, 3)); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

        res.status(200).json(timelinePosts);
        console.log('--- getTimelinePosts –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ ---');

    } catch (error) {
        console.error(error); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π' });
    }
};

// @desc ¬† ¬†–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ö—ç—à—Ç–µ–≥—É
// @route ¬† GET /api/posts/hashtag/:tag_name
// @access ¬†–ü—Ä–∏–≤–∞—Ç–Ω—ã–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
export const getPostsByHashtag = async (req, res) => {
    try {
        const tagName = req.params.tag_name.toLowerCase(); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ö—ç—à—Ç–µ–≥–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å —Ö—ç—à—Ç–µ–≥–æ–º:", tagName);

        const posts = await Post.find({ hashtags: tagName }) // –ò—â–µ–º –ø–æ—Å—Ç—ã, –≥–¥–µ –º–∞—Å—Å–∏–≤ hashtags —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥
            .populate("author", "username profilePicture")
            .sort({ createdAt: -1 })
            .limit(50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        if (posts.length === 0) {
            return res.status(404).json({ message: `–ü–æ—Å—Ç—ã —Å —Ö—ç—à—Ç–µ–≥–æ–º #${tagName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã` });
        }

        return res.status(200).json({
            message: `–ü–æ—Å—Ç—ã —Å —Ö—ç—à—Ç–µ–≥–æ–º #${tagName} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã`,
            posts,
        });
    }
    catch (error) {
        console.error(error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö—ç—à—Ç–µ–≥—É" });
    }
};